1. Czy wiem jak zainstalować sterowniki bez exeków?

https://www.youtube.com/watch?v=N7S9sTjvPxk&ab_channel=DriverGuide

Zrobić to z managera urządzeń.


2. Czy wiem co to DirectX?

https://www.youtube.com/watch?v=xfSk6kwWBuE&ab_channel=OnlineTechTips

Jest to API które umożliwia komunikację gry ze sprzętem


3. Czy wiem co to Ray tracing?

https://www.youtube.com/watch?v=YAeXUL34bsI&ab_channel=TrustedReviews

Jest to śledzenie odbijania promieni


4. Co to jest Fork na githubie?

https://www.youtube.com/watch?v=VbfvQzCoiQc&ab_channel=DevLeonardo

Zrobienie kopi czyjegoś repozytory do swojego, pozwala na kolaboracje między nimi. 
Można pobrać kopie i wtedy można je edytować u siebie a następnie przekazywać je na oryginalne repozytorium.

Przy forkowaniu należy unikać wysyłania na mainbranch.


5. Co to CPU i GPU, czym się różnią?

https://www.youtube.com/watch?v=kLrasPcW_FE&ab_channel=WondershareRecoveritDataRecovery

GPU - Graphic Processing Unit - wykorzystuje tzw ALU (Arithmetic Logical Units), ma to na celu udzielić użytkownikowi maksymalnej wydajności dla odbiorcy końcowego

CPU - Central Processing Unit - mózg całego komputera odpowiada za wszystkie główne operacje matematyczne przeprowadzane w komputerze

Różnice: 
GPU wykonuje zadania skomplikowane, CPU zajmuje się zadaniami prostrzymi
GPU posiada własny RAM, CPU do pracy wykorzystuje pamięć RAM komputera

Oba posiadają tzw "silicon hardware"
Początkowo GPU było wykorzystywane dla renderowania obrazów 3D
Aktualnie GPU przejmują, także niektóre czynności z całego komputera
Głównie wykorzystywane do gamingu.

W przypadku pojedyńczych zadań lepiej sprawdzi się CPU, niż GPU ponieważ lepiej radzi sobie z prostrzymi zadaniami.



6. Czy byłbym w stanie określic w którym miejscu jest błąd w przypadku 1000ca testów.

1.Pass
2.Pass
10.Pass
50.Pass
100.Pass
200.Pass
300.Pass
400.Pass
500.Pass
.
.
.
1000.Fail


Wziąć po uwagę, konieczność przetestowania przedział 501-1000.
Wybrać i sprawdzić 750

if Fail - sprwadzić 501-750
    wybrać 625
        if fail - sprwadzić 501-625
        if pass - sprawdzić 626-750

if Pass - sprwadzić 751-1000

itd...itp... zastosować połówkowanie



7. Co wiem o sortowaniu?
// do tej pory nic... za to GPT wie więcej

Sortowanie bąbelkowe (Bubble Sort): 
Jest to prosty algorytm, który porównuje sąsiednie elementy i zamienia je, jeśli są w złej kolejności. 
Powtarza ten proces aż do momentu, gdy cała lista zostanie posortowana.

Sortowanie przez wstawianie (Insertion Sort): 
Ten algorytm bierze jeden element na raz i wstawia go we właściwe miejsce w już posortowanej części listy. 
W rezultacie lista jest budowana jednym elementem za drugim.

Sortowanie przez wybieranie (Selection Sort): 
Algorytm ten wybiera najmniejszy (lub największy) element z listy i umieszcza go na początku. 
Następnie powtarza ten proces dla reszty listy.

Sortowanie przez scalanie (Merge Sort): 
Jest to algorytm dziel i zwyciężaj. Dzieli listę na mniejsze części, sortuje je, a następnie łączy w jedną posortowaną listę. 
Jest to algorytm rekurencyjny.

Sortowanie szybkie (Quick Sort): 
Podobnie jak Merge Sort, Quick Sort jest algorytmem dziel i zwyciężaj. 
Dzieli listę na podlisty względem elementu referencyjnego (pivot), sortuje je i łączy.

Sortowanie kubełkowe (Bucket Sort): 
Jest to algorytm, który rozdziela elementy na kubełki na podstawie ich wartości, a następnie sortuje każdy kubełek. 
Może być szczególnie skuteczny dla danych rozkładających się równomiernie.

Sortowanie przez zliczanie (Counting Sort): 
Ten algorytm jest skuteczny dla list zawierających ograniczony zakres wartości. 
Polega na zliczaniu ilości wystąpień każdej wartości, a następnie umieszczaniu ich w odpowiednich pozycjach.

Sortowanie przez kopcowanie (Heap Sort): 
Ten algorytm wykorzystuje strukturę danych nazywaną kopcem, która pozwala na szybkie odnajdywanie i usuwanie największego elementu. 
Jest to algorytm oparty na drzewach binarnych.

Sortowanie przez kartotekowanie (Radix Sort): 
Ten algorytm operuje na poszczególnych cyfrach lub literach w kluczach. 
Najpierw sortuje na podstawie najmniej znaczącej cyfry, a następnie na podstawie kolejnych cyfr, aż do uzyskania pełnego sortowania.

To tylko kilka przykładów algorytmów sortowania. 
Każdy z nich ma swoje mocne strony i słabości, oraz różnice w wydajności w zależności od specyfiki danych wejściowych. 
Wybór odpowiedniego algorytmu zależy od wielu czynników, takich jak rozmiar listy, charakter danych oraz wymagania co do wydajności.


8. Rodzaje requestów?

GET: Pobiera zawartość strony lub zasobu pod wskazanym adresem URL.
response = requests.get('https://example.com')

POST: Wysyła dane do serwera w celu przetworzenia. Jest używany do przesyłania danych formularzy, przesyłania plików itp.
data = {'key1': 'value1', 'key2': 'value2'}
response = requests.post('https://example.com/api/endpoint', data=data)

PUT: Aktualizuje zasób na serwerze. Najczęściej jest używany, aby zmodyfikować istniejący zasób.
data = {'key1': 'updated_value1', 'key2': 'updated_value2'}
response = requests.put('https://example.com/api/endpoint/1', data=data)

DELETE: Usuwa określony zasób na serwerze.
response = requests.delete('https://example.com/api/endpoint/1')

HEAD: Podobne do GET, ale zwraca tylko nagłówki HTTP i nie zawiera samego ciała odpowiedzi.
response = requests.head('https://example.com')

PATCH: Służy do częściowej aktualizacji zasobu. Może być używany, gdy chcesz zaktualizować tylko część danych zasobu.
data = {'key1': 'updated_value1'}
response = requests.patch('https://example.com/api/endpoint/1', data=data)

OPTIONS: Zwraca dostępne metody HTTP dla określonego zasobu.
response = requests.options('https://example.com')

W przypadku niektórych zapytań, takich jak POST, PUT i PATCH, można przekazywać dane jako argument data lub json.