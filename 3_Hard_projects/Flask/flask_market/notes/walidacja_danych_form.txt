// routes.py

@app.route('/register', methods=['GET','POST'])
def registerPage():
    form = RegisterForm()
    if form.validate_on_submit():
        userToCreate = User(username=form.username.data,
                            emailAddress = form.emailAddress.data,
                            password_hash=form.password1.data)
        db.session.add(userToCreate)
        db.session.commit()
        return redirect(url_for('marketPage'))
    return render_template('register.html',form=form)

************************************************************************

// Cross Site Request Forgery (CSRF)

// register.html
...
{% block content %}
    <body class="text-center">
        <div class="container">
            <form method="POST" class="form-register" style="color:white">
*************** {{ form.hidden_tag() }} ********************************** DODAÄ† !!!!
                <img class="mb-4" src="https://res.cloudinary.com/jimshapedcoding/image/upload/v1597332609/android-icon-192x192_ove2a7.png" alt="">
...

************************************************************************

// wtforms.valodators

// forms.html

from wtforms.validators import Length, EqualTo, Email, DataRequired

class RegisterForm(FlaskForm):
    username = StringField(label='User Name:', validators=[Length(min=2,max=30), DataRequired()])
    emailAddress = StringField(label='Email Address:', validators=[Email(), DataRequired()])
    password1 = PasswordField(label='Password:', validators=[Length(min=6), DataRequired()])
    password2 = PasswordField(label='Confirm Password:', validators=EqualTo[('password1'), DataRequired()])

************************************************************************

// routes

...
return redirect(url_for('marketPage'))
    if form.errors != {}: # if there are not errors from validation
        for err_msg in form.errors.values():
            print(f'There was an error with creating a user: {err_msg}')
    return render_template('register.html',form=form)

